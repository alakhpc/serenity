window.SIDEBAR_ITEMS = {"enum":[["GuildPagination","Representation of the method of a query to send for the `get_guilds` function."],["HttpError",""],["LightMethod","An method used for ratelimiting special routes."],["MessagePagination",""],["Route",""],["UserPagination","Representation of the method of a query to send for the `get_scheduled_event_users` function."]],"fn":[["deserialize_errors",""]],"struct":[["DiscordJsonError",""],["DiscordJsonSingleError",""],["ErrorResponse",""],["Http","Note: For all member functions that return a [`Result`], the Error kind will be either [`Error::Http`] or [`Error::Json`]."],["HttpBuilder","A builder for the underlying [`Http`] client that performs requests to Discordâ€™s HTTP API. If you do not need to use a proxy or do not need to disable the rate limiter, you can use [`Http::new`] instead."],["Multipart","Holder for multipart body. Contains files, multipart fields, and payload_json for creating requests with attachments."],["Ratelimit","A set of data containing information about the ratelimits for a particular [`RatelimitingBucket`], which is stored in `Http`."],["RatelimitInfo","Passed to the [`Ratelimiter::set_ratelimit_callback`] callback. If using Client, that callback is initialized to call the `EventHandler::ratelimit()` method."],["Ratelimiter","Ratelimiter for requests to the Discord API."],["RatelimitingBucket","Used to group requests together for ratelimiting."],["Request",""],["StatusCode","An HTTP status code (`status-code` in RFC 7230 et al.)."],["Typing","A struct to start typing in a `Channel` for an indefinite period of time."]],"trait":[["CacheHttp","This trait will be required by functions that need [`Http`] and can optionally use a [`Cache`] to potentially avoid REST-requests."]],"type":[["RequestBuilder",""]]};